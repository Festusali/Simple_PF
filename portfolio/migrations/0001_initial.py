# Generated by Django 2.0.10 on 2019-02-10 01:17

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import portfolio.models
import portfolio.tools


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', portfolio.models.UserModelManager()),
            ],
        ),
        migrations.CreateModel(
            name='Certificate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Short description', max_length=200)),
                ('detail', models.TextField(help_text='Long description', max_length=1000)),
                ('tags', models.CharField(blank=True, help_text='Hash tags', max_length=200)),
                ('date', models.DateField(blank=True, help_text='Date acquired')),
            ],
        ),
        migrations.CreateModel(
            name='Experience',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Short description', max_length=200)),
                ('detail', models.TextField(help_text='Long description', max_length=1000)),
                ('tags', models.CharField(blank=True, help_text='Hash tags', max_length=200)),
                ('start_date', models.DateField(blank=True, help_text='Beginning date')),
                ('end_date', models.DateField(blank=True, help_text='End date')),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sender', models.CharField(help_text='Sender', max_length=100)),
                ('email', models.EmailField(help_text='Email address', max_length=254)),
                ('phone', models.IntegerField(help_text='Phone Number')),
                ('message', models.TextField(help_text='Message body', max_length=1000)),
                ('date', models.DateTimeField(auto_now_add=True, help_text='Sent date')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Short description', max_length=200)),
                ('details', models.TextField(help_text='Detailed description', max_length=1000)),
                ('tags', models.CharField(blank=True, help_text='Hash tags', max_length=200)),
                ('image1', models.ImageField(blank=True, help_text='Project photo', upload_to=portfolio.tools.pro_pho_path)),
                ('image2', models.ImageField(blank=True, help_text='Project photo', upload_to=portfolio.tools.pro_pho_path)),
                ('image3', models.ImageField(blank=True, help_text='Project photo', upload_to=portfolio.tools.pro_pho_path)),
                ('start_date', models.DateField(blank=True, help_text='Date initiated. In this form; yyyy-mm-dd (i.e, 2018-12-31)')),
                ('end_date', models.DateField(blank=True, help_text='Due/end date. In this form; yyyy-mm-dd (i.e, 2018-12-31)')),
            ],
        ),
        migrations.CreateModel(
            name='TempUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(help_text='Username', max_length=120, unique=True)),
                ('email', models.EmailField(help_text='Valid Email address', max_length=200, unique=True)),
                ('password', models.CharField(help_text='Password', max_length=200)),
                ('code', models.IntegerField(help_text='Verification code', unique=True)),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='Date registered')),
            ],
        ),
        migrations.CreateModel(
            name='UserData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('other_name', models.CharField(blank=True, help_text='Other names', max_length=30)),
                ('bio', models.TextField(blank=True, help_text='About User', max_length=1000)),
                ('tags', models.CharField(blank=True, help_text='#hash tags', max_length=255)),
                ('target', models.CharField(blank=True, help_text='Target Audience/Clients', max_length=200)),
                ('action', models.CharField(blank=True, help_text='Call to action (Convince potential clients)', max_length=200)),
                ('mod', models.BooleanField(default=False, help_text='Is the user a moderator')),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('T', 'Transgender'), ('O', 'Other')], help_text='Gender', max_length=2)),
                ('status', models.CharField(blank=True, choices=[('M', 'Married'), ('S', 'Single'), ('E', 'Engaged'), ('D', 'Divorced'), ('O', 'Others')], help_text='Marital Status', max_length=2)),
                ('phone', models.IntegerField(blank=True, help_text='Mobile Number', null=True)),
                ('address', models.CharField(blank=True, help_text='Contact address', max_length=150)),
                ('facebook', models.URLField(blank=True, help_text='Facebook Account')),
                ('twitter', models.URLField(blank=True, help_text='Twitter Account')),
                ('linkedin', models.URLField(blank=True, help_text='LinkedIn Account')),
                ('github', models.URLField(blank=True, help_text='Github Account')),
                ('avatar', models.ImageField(blank=True, help_text='Profile Picture', upload_to=portfolio.tools.pic_path)),
                ('joined', models.DateTimeField(auto_now_add=True, help_text='Join date')),
                ('modified', models.DateTimeField(auto_now=True, help_text='Last modifield')),
                ('user', models.OneToOneField(help_text='More user data', on_delete=django.db.models.deletion.CASCADE, related_name='user_data', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vote', models.BooleanField(help_text='Vote up/down')),
                ('date', models.DateField(help_text='Date voted')),
                ('project', models.ForeignKey(help_text='Vote project', on_delete=django.db.models.deletion.CASCADE, related_name='projet', to='portfolio.Project')),
                ('user', models.ForeignKey(help_text='User Voting', on_delete=django.db.models.deletion.CASCADE, related_name='user_vote', to='portfolio.UserData')),
            ],
        ),
        migrations.AddField(
            model_name='project',
            name='user',
            field=models.ForeignKey(help_text='User project', on_delete=django.db.models.deletion.CASCADE, related_name='project', to='portfolio.UserData'),
        ),
        migrations.AddField(
            model_name='message',
            name='user',
            field=models.ForeignKey(help_text='Receiver', on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='portfolio.UserData'),
        ),
        migrations.AddField(
            model_name='experience',
            name='user',
            field=models.ForeignKey(help_text='User experience', on_delete=django.db.models.deletion.CASCADE, related_name='experience', to='portfolio.UserData'),
        ),
        migrations.AddField(
            model_name='certificate',
            name='user',
            field=models.ForeignKey(help_text='User certificate', on_delete=django.db.models.deletion.CASCADE, related_name='certificate', to='portfolio.UserData'),
        ),
    ]
